"'tropospheric_NO2_column_number_density_validity>",
validity, ";derive(datetime_stop {time}); ",
"bin_spatial(",
pixelNlat, ",-90,", pixelSize, ",", pixelNlon, ",-180,", pixelSize,
"); keep(tropospheric_NO2_column_number_density)' ",
rawFilePath,
" ",
saveFilePath)
print("Converting with harp")
system(command, intern = FALSE,
ignore.stdout = FALSE, ignore.stderr = FALSE,
wait = TRUE, input = NULL,
timeout = 0)
}
}
if(removeFile)
file.remove(rawFilePath)
gc()
}
# ----------------------------------------------
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
# ----------------------------------------------
# ----------------------------------------------
# CONFIG
# ----------------------------------------------
validities = c(50, 75)
pixelSizes = c(0.1)
t1 = "2020-03-01T00:00:00.000Z"
#t2 = "2019-10-01T00:00:00.000Z"
t2 = "NOW"
removeFile = TRUE
# ----------------------------------------------
# ----------------------------------------------
# PREPARATION / LOAD FILE LISTS
# ----------------------------------------------
rawPath = file.path(folders$tmp, "data", "tropomi")
dir.create(rawPath, showWarnings = FALSE, recursive=TRUE)
dir.create(h5Path, showWarnings = FALSE, recursive=TRUE)
listPath = file.path(rawPath, "list.txt")
listUrl = paste0("https://s5phub.copernicus.eu/dhus/api/stub/products?filter=(%20beginPosition:[",
t1, "%20TO%20", t2,
"]%20AND%20endPosition:[",
t1, "%20TO%20", t2,
"]%20)%20AND%20(%20%20(platformname:Sentinel-5%20AND%20producttype:L2__NO2___%20AND%20processinglevel:L2%20AND%20processingmode:Offline))&offset=0&limit=10000&sortedby=ingestiondate&order=asc")
download.file(listUrl,
destfile = listPath,
quiet = TRUE,
method="wget",
extra=paste0("--user=", authUser, " --password=", authPassword))
downloadList = rjson::fromJSON(file=file.path(rawPath, "list.txt"))
getList = NULL
for(i in 1:length(downloadList[["products"]])){
tmp = data.table(uuid = downloadList[["products"]][[i]][["uuid"]],
identifier = downloadList[["products"]][[i]][["identifier"]])
getList = rbind(getList, tmp)
}
# ----------------------------------------------
# ----------------------------------------------
# DOWNLOAD
# ----------------------------------------------
u = "https://s5phub.copernicus.eu/dhus/odata/v1/Products"
for(i in 1:nrow(getList)){
uuid = getList[[i,1]]
identifier = getList[[i,2]]
print(identifier)
rawFilePath = file.path(rawPath, identifier)
h5Paths = file.path(folders$tmp, "data", "h5",
apply(expand.grid(pixelSizes, validities), 1,
paste, collapse = "/"))
h5Paths
h5FilePaths = file.path(h5Paths, paste0(identifier, ".h5"))
if(all(file.exists(h5FilePaths), TRUE)) {
next()
}
if(!file.exists(rawFilePath)){
print("Downloading ...")
tropomiUrl = paste0(u, "('", uuid, "')/$value")
download.file(tropomiUrl,
destfile = rawFilePath,
quiet = TRUE,
method="wget",
extra=paste0("--user=", authUser, " --password=", authPassword))
print("Download complete.")
}
for(pixelSize in pixelSizes){
pixelNlat = 180*1/pixelSize+1
pixelNlon = 360*1/pixelSize+1
for(validity in validities){
savePath = file.path(folders$tmp, "data", "h5", pixelSize, validity)
saveFilePath = file.path(savePath, paste0(identifier, ".h5"))
if(file.exists(saveFilePath)){
next()
}
print(paste("Creating raster file for validity", validity, "and pixel size", pixelSize))
command = paste0("/home/archie/harp/bin/harpconvert --format hdf5 --hdf5-compression 9 -a ",
"'tropospheric_NO2_column_number_density_validity>",
validity, ";derive(datetime_stop {time}); ",
"bin_spatial(",
pixelNlat, ",-90,", pixelSize, ",", pixelNlon, ",-180,", pixelSize,
"); keep(tropospheric_NO2_column_number_density)' ",
rawFilePath,
" ",
saveFilePath)
print("Converting with harp")
system(command, intern = FALSE,
ignore.stdout = FALSE, ignore.stderr = FALSE,
wait = TRUE, input = NULL,
timeout = 0)
}
}
if(removeFile)
file.remove(rawFilePath)
gc()
}
# ----------------------------------------------
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
loadPackages(c("raster",
"leaflet",
"rgdal",
"smoothr",
"units",
"lwgeom",
"rgeos",
"sf"))
# ----------------------------------------------
# ----------------------------------------------
# SETUP
# ----------------------------------------------
#path = "/home/archie/WIFO_cumulus/sentinel"
year = "2020"
month = "02"
quantile_selection = c(0, 0.4, 0.6, 0.8, 0.85, 0.92, 0.95, 0.97, 0.99, 0.995)
#quantile_selection = c(0, 0.4, 0.8, 0.95, 0.97)
crumps = c(10000, 5000, 4000, 3000, 2000, 1800, 1600, 200, 200, 200)
#crumps = c(5000, 3000, 2000, 1500, 1200, 1000, 800, 200, 200, 200)
#crumps = c(10000, 5000, 1800, 1000, 200)
f_holes = c(3001, 3000, 2000, 1000, 1000, 1000, NA, NA, NA, NA)
#f_holes = c(3001, 3000, 2000, 1000, NA)
opast = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
border_smooth = 3
simplify_tol = 0.02
# ----------------------------------------------
path = file.path(file.path(folders$tmp, "data", "aggregated"))
files = list.files(path)
meanData = loadData(file.path(path, paste0(month, "_", year, ".rData")))
meanData = meanData[mValue >= quantile(meanData$mValue, 0.95)]
meanData[, q := rank(mValue)/nrow(meanData)]
l = length(quantile_selection)
for (i in 1:l) {
meanData[q >= quantile_selection[i], g := i]
}
meanData = meanData[, .(X, Y, g)]
meanRaster = rasterFromXYZ(meanData)
#meanRaster <- setExtent(meanRaster, extent(-180,180,-90, 90))
crsString = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
#crsString = "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
#crsString = "+proj=robin +lon_0=-69 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
crs(meanRaster) = sp::CRS(crsString)
#crs(meanRaster) = sp::CRS("+proj=longlat +no_defs +init=epsg:3857")
#meanRaster = setExtent(meanRaster, extent(-180,180,-90, 90))
# ----------------------------------------------
# RBIND, SAVE
# ----------------------------------------------
writeRaster(meanRaster, file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".geotiff")),
format="GTiff", overwrite = TRUE)
library(RColorBrewer)
writeGDAL(as(meanRaster, Class = "SpatialPixelsDataFrame"),
fname = file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
colorTables = list(brewer.pal(10, "Spectral")),
drivername = "PNG", type = "Byte", mvFlag = 1L,
setStatistics=TRUE)
projectRasterForLeaflet(meanRaster, method)
#----------------------------------------------
# ----------------------------------------------
# SHOW IN LEAFLET MAP
# ----------------------------------------------
leaflet_map = leaflet() %>% addProviderTiles("CartoDB.Positron")
leaflet_map = leaflet_map %>%
addRasterImage(meanRaster, colors = "Spectral", opacity = 0.4)
leaflet_map
# ----------------------------------------------
projectRasterForLeaflet(meanRaster, method)
loadPackages("tiler")
tile(meanRaster)
meanRaster
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")))
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".geotiff")))
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")))
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles"))
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles"),
zoom = 1-5)
file.path(folders$tmp, "tiles")
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = 1-5)
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = 4-5)
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = 4-5)
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = 5)
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = "3-5")
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles/"),
zoom = "2-3")
file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png"))
tile(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
file.path(folders$tmp, "tiles"),
zoom = "2-3")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")), package = "tiler")
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
package = "tiler")
x
system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
package = "tiler")
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".geotiff")), package = "tiler")
tile(x, tiles, 0)
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
package = "tiler")
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
package = "tiler")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")))
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3")
x <- system.file(file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
package = "tiler")
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3")
?tile
tile(x, tiles, "2-3", crs = crsString)
crsString
tile(x, tiles, "2-3", crs = crsString, viewer = F, georef = F)
x = file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png"))
tiles <- file.path(folders$tmp, "tiles")
tile(x, tiles, "2-3", crs = crsString, viewer = F, georef = F)
seq(-177.5, 177.5, 5)
loadPackages("ncdf4")
filename="time.nc"
xvals <- seq(-177.5, 177.5, 5)
yvals <- seq(-87.5, 87.5, 5)
nx <- length(xvals)
ny <- length(yvals)
lon1 <- ncdim_def("longitude", "degrees_east", xvals)
lat2 <- ncdim_def("latitude", "degrees_north", yvals)
time <- ncdim_def("Time","months", 1:12, unlim=TRUE)
mv <- -999 #missing value to use
var_temp <- ncvar_def("temperature", "celsius", list(lon1, lat2, time), longname="CRU_Global_1961-1990_Mean_Monthly_Surface_Temperature_Climatology", mv)
loadPackages("ncdf4")
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
loadPackages(c("raster",
"leaflet",
"rgdal",
"smoothr",
"units",
"lwgeom",
"rgeos",
"sf"))
# ----------------------------------------------
# ----------------------------------------------
# SETUP
# ----------------------------------------------
#path = "/home/archie/WIFO_cumulus/sentinel"
year = "2020"
month = "02"
quantile_selection = c(0, 0.4, 0.6, 0.8, 0.85, 0.92, 0.95, 0.97, 0.99, 0.995)
#quantile_selection = c(0, 0.4, 0.8, 0.95, 0.97)
crumps = c(10000, 5000, 4000, 3000, 2000, 1800, 1600, 200, 200, 200)
#crumps = c(5000, 3000, 2000, 1500, 1200, 1000, 800, 200, 200, 200)
#crumps = c(10000, 5000, 1800, 1000, 200)
f_holes = c(3001, 3000, 2000, 1000, 1000, 1000, NA, NA, NA, NA)
#f_holes = c(3001, 3000, 2000, 1000, NA)
opast = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
border_smooth = 3
simplify_tol = 0.02
# ----------------------------------------------
path = file.path(file.path(folders$tmp, "data", "aggregated"))
files = list.files(path)
meanData = loadData(file.path(path, paste0(month, "_", year, ".rData")))
meanData = meanData[mValue >= quantile(meanData$mValue, 0.95)]
meanData[, q := rank(mValue)/nrow(meanData)]
l = length(quantile_selection)
for (i in 1:l) {
meanData[q >= quantile_selection[i], g := i]
}
meanData = meanData[, .(X, Y, g)]
meanRaster = rasterFromXYZ(meanData)
#meanRaster <- setExtent(meanRaster, extent(-180,180,-90, 90))
crsString = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
#crsString = "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
#crsString = "+proj=robin +lon_0=-69 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
crs(meanRaster) = sp::CRS(crsString)
#crs(meanRaster) = sp::CRS("+proj=longlat +no_defs +init=epsg:3857")
#meanRaster = setExtent(meanRaster, extent(-180,180,-90, 90))
# ----------------------------------------------
# RBIND, SAVE
# ----------------------------------------------
writeRaster(meanRaster, file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".geotiff")),
format="GTiff", overwrite = TRUE)
library(RColorBrewer)
writeGDAL(as(meanRaster, Class = "SpatialPixelsDataFrame"),
fname = file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
colorTables = list(brewer.pal(10, "Spectral")),
drivername = "PNG", type = "Byte", mvFlag = 1L,
setStatistics=TRUE)
loadPackages("ncdf4")
filename="time.nc"
xvals <- seq(-177.5, 177.5, 5)
yvals <- seq(-87.5, 87.5, 5)
nx <- length(xvals)
ny <- length(yvals)
lon1 <- ncdim_def("longitude", "degrees_east", xvals)
lat2 <- ncdim_def("latitude", "degrees_north", yvals)
time <- ncdim_def("Time","months", 1:12, unlim=TRUE)
mv <- -999 #missing value to use
var_temp <- ncvar_def("temperature", "celsius", list(lon1, lat2, time), longname="CRU_Global_1961-1990_Mean_Monthly_Surface_Temperature_Climatology", mv)
ncnew <- nc_create(filename, list(var_temp))
print(paste("The file has", ncnew$nvars,"variables"))
#[1] "The file has 1 variables"
print(paste("The file has", ncnew$ndim,"dimensions"))
# Some fake dataset based on latitude, to check whether the data are
# written in the correct order
data <- rep(yvals, each=nx)
# Add random -999 value to check whether missing values are correctly
# written
data[sample(1:(nx*ny), 100, replace = FALSE)] <- -999
ncvar_put(ncnew, var_temp, data, start=c(1,1,1), count=c(nx,ny,1))
# Don't forget to close the file
nc_close(ncnew)
# Verification
library(rasterVis)
out <- raster("time.nc")
levelplot(out, margin=FALSE)
nx
yvals
rep(yvals, each=nx)
meanData$X
xvals <- unique(meanData$X)
xvals <- unique(meanData$X)
yvals <- unique(meanData$Y)
nx <- length(xvals)
nx
ny <- length(yvals)
lon1 <- ncdim_def("longitude", "degrees_east", xvals)
lat2 <- ncdim_def("latitude", "degrees_north", yvals)
time <- ncdim_def("Time","months", 1:12, unlim=TRUE)
mv <- -999 #missing value to use
var_temp <- ncvar_def("temperature", "celsius", list(lon1, lat2, time), longname="CRU_Global_1961-1990_Mean_Monthly_Surface_Temperature_Climatology", mv)
ncnew <- nc_create(filename, list(var_temp))
print(paste("The file has", ncnew$nvars,"variables"))
#[1] "The file has 1 variables"
print(paste("The file has", ncnew$ndim,"dimensions"))
# Some fake dataset based on latitude, to check whether the data are
# written in the correct order
data <- rep(yvals, each=nx)
# Add random -999 value to check whether missing values are correctly
# written
data[sample(1:(nx*ny), 100, replace = FALSE)] <- -999
ncvar_put(ncnew, var_temp, data, start=c(1,1,1), count=c(nx,ny,1))
# Don't forget to close the file
nc_close(ncnew)
# Verification
library(rasterVis)
out <- raster("time.nc")
levelplot(out, margin=FALSE)
# Don't forget to close the file
nc_close(ncnew)
data
meanData$g
length(meanData$g)
length(data)
meanData[is.na(g)]
xvals
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
loadPackages(c("raster",
"leaflet",
"rgdal",
"smoothr",
"units",
"lwgeom",
"rgeos",
"sf"))
# ----------------------------------------------
# ----------------------------------------------
# SETUP
# ----------------------------------------------
#path = "/home/archie/WIFO_cumulus/sentinel"
year = "2020"
month = "01"
quantile_selection = c(0, 0.4, 0.6, 0.8, 0.85, 0.92, 0.95, 0.97, 0.99, 0.995)
#quantile_selection = c(0, 0.4, 0.8, 0.95, 0.97)
crumps = c(10000, 5000, 4000, 3000, 2000, 1800, 1600, 200, 200, 200)
#crumps = c(5000, 3000, 2000, 1500, 1200, 1000, 800, 200, 200, 200)
#crumps = c(10000, 5000, 1800, 1000, 200)
f_holes = c(3001, 3000, 2000, 1000, 1000, 1000, NA, NA, NA, NA)
#f_holes = c(3001, 3000, 2000, 1000, NA)
opast = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
border_smooth = 3
simplify_tol = 0.02
# ----------------------------------------------
path = file.path(file.path(folders$tmp, "data", "aggregated"))
files = list.files(path)
meanData = loadData(file.path(path, paste0(month, "_", year, ".rData")))
meanData = meanData[mValue >= quantile(meanData$mValue, 0.95)]
meanData[, q := rank(mValue)/nrow(meanData)]
l = length(quantile_selection)
for (i in 1:l) {
meanData[q >= quantile_selection[i], g := i]
}
meanData = meanData[, .(X, Y, g)]
meanRaster = rasterFromXYZ(meanData)
#meanRaster <- setExtent(meanRaster, extent(-180,180,-90, 90))
crsString = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
#crsString = "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
#crsString = "+proj=robin +lon_0=-69 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
crs(meanRaster) = sp::CRS(crsString)
#crs(meanRaster) = sp::CRS("+proj=longlat +no_defs +init=epsg:3857")
#meanRaster = setExtent(meanRaster, extent(-180,180,-90, 90))
# ----------------------------------------------
# RBIND, SAVE
# ----------------------------------------------
writeRaster(meanRaster, file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".geotiff")),
format="GTiff", overwrite = TRUE)
library(RColorBrewer)
writeGDAL(as(meanRaster, Class = "SpatialPixelsDataFrame"),
fname = file.path(folders$tmp,
paste0("World_raster_", year, "_", month, ".png")),
colorTables = list(brewer.pal(10, "Spectral")),
drivername = "PNG", type = "Byte", mvFlag = 1L,
setStatistics=TRUE)
#----------------------------------------------
# ----------------------------------------------
# SHOW IN LEAFLET MAP
# ----------------------------------------------
leaflet_map = leaflet() %>% addProviderTiles("CartoDB.Positron")
leaflet_map = leaflet_map %>%
addRasterImage(meanRaster, colors = "Spectral", opacity = 0.4)
leaflet_map
# ----------------------------------------------
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
# ----------------------------------------------
# ----------------------------------------------
# SETUP
# ----------------------------------------------
year = "2020"
month = "02"
minObservations = 7
# ----------------------------------------------
no2Data = loadData(file.path(folders$tmp, "data", "merged", paste0(month, "_", year, ".rData")))
mData = no2Data[, .(mValue = median(value),
obs = .N), by = c("X", "Y")]
mData = mData[obs > minObservations][, obs := NULL]
saveData(mData, file.path(folders$tmp, "data", "aggregated", paste0(month, "_", year, ".rData")))
