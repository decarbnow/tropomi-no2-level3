# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
# ----------------------------------------------
# ----------------------------------------------
# PREPARATION / LOAD FILE LISTS
# ----------------------------------------------
validities = c(50, 75)
pixelSizes = 0.1
rawPath = file.path(folders$tmp, "data", "tropomi")
dir.create(rawPath, showWarnings = FALSE, recursive=TRUE)
dir.create(h5Path, showWarnings = FALSE, recursive=TRUE)
t1 = "2019-01-12T00:00:00.000Z"
t2 = "2019-04-01T00:00:00.000Z"
removeFile = TRUE
#t2 = "NOW"
listPath = file.path(rawPath, "list.txt")
listUrl = paste0("https://s5phub.copernicus.eu/dhus/api/stub/products?filter=(%20beginPosition:[",
t1, "%20TO%20", t2,
"]%20AND%20endPosition:[",
t1, "%20TO%20", t2,
"]%20)%20AND%20(%20%20(platformname:Sentinel-5%20AND%20producttype:L2__NO2___%20AND%20processinglevel:L2%20AND%20processingmode:Offline))&offset=0&limit=10000&sortedby=ingestiondate&order=asc")
download.file(listUrl,
destfile = listPath,
quiet = TRUE,
method="wget",
extra=paste0("--user=", authUser, " --password=", authPassword))
downloadList = rjson::fromJSON(file=file.path(rawPath, "list.txt"))
getList = NULL
for(i in 1:length(downloadList[["products"]])){
tmp = data.table(uuid = downloadList[["products"]][[i]][["uuid"]],
identifier = downloadList[["products"]][[i]][["identifier"]])
getList = rbind(getList, tmp)
}
# ----------------------------------------------
i = 1
uuid = getList[[i,1]]
identifier = getList[[i,2]]
print(identifier)
rawFilePath = file.path(rawPath, identifier)
h5Path = file.path(folders$tmp, "data", "h5", pixelSizes, validities)
h5FilePath = file.path(h5Path, paste0(identifier, ".h5"))
h5FilePaths = file.path(h5Path, paste0(identifier, ".h5"))
file.exists(h5FilePaths)
h5Path = file.path(folders$tmp, "data", "h5", pixelSizes, validities)
h5Paths = file.path(folders$tmp, "data", "h5", pixelSizes, validities)
h5Paths
pixelSizes = c(0.1, 0.5)
h5Paths = file.path(folders$tmp, "data", "h5", pixelSizes, validities)
h5Paths
?file.path
expand.grid(pixelSizes, validities)
h5Paths = file.path(folders$tmp, "data", "h5", expand.grid(pixelSizes, validities))
h5Paths
expand.grid(pixelSizes, validities)
paste(expand.grid(pixelSizes, validities))
h5Paths = file.path(folders$tmp, "data", "h5", paste(expand.grid(pixelSizes, validities)))
h5Paths
h5Paths = file.path(folders$tmp, "data", "h5", paste(expand.grid(pixelSizes, validities)))
paste(expand.grid(pixelSizes, validities)
)
expand.grid(pixelSizes, validities)
unlist(expand.grid(pixelSizes, validities))
expand.grid(pixelSizes, validities)
as.vector(expand.grid(pixelSizes, validities))
h5Paths = file.path(folders$tmp, "data", "h5", expand.grid(pixelSizes, validities))
h5Paths
h5Paths = file.path(folders$tmp, "data", "h5", expand.grid(pixelSizes, validities, stringsAsFactors = FALSE))
h5Paths
expand.grid(pixelSizes, validities, stringsAsFactors = FALSE)
paste(expand.grid(pixelSizes, validities, stringsAsFactors = FALSE), collapse = "")
paste(expand.grid(pixelSizes, validities, stringsAsFactors = FALSE), collapse = ", ")
expand.grid(pixelSizes, validities, stringsAsFactors = FALSE)
outer(c("a", "b"), c("c", "d"))
outer(c("a", "b"), c("c", "d"), FUN = "paste0")[1:4]
outer(c("a", "b"), c("c", "d"), FUN = "c()")[1:4]
outer(c("a", "b"), c("c", "d"), FUN = "as.vector")[1:4]
outer(c("a", "b"), c("c", "d"), FUN = "")[1:4]
expand.grid(pixelSizes, validities, stringsAsFactors = FALSE)
t(expand.grid(pixelSizes, validities, stringsAsFactors = FALSE))
paste("asdf", t(expand.grid(pixelSizes, validities, stringsAsFactors = FALSE)))
paste(t(pixelSizes), t(validities))
expand.grid(pixelSizes, validities)
paste(expand.grid(pixelSizes, validities), collapse = /)
paste(expand.grid(pixelSizes, validities), collapse = "/")
paste(expand.grid(t(pixelSizes), (validities)), collapse = "/")
paste(expand.grid(pixelSizes, validities), collapse = "/")
paste(pixelSizes, validities, collapse = "/")
expand.grid(pixelSizes, validities
paste(expand.grid(pixelSizes, validities))
paste(t(expand.grid(pixelSizes, validities)))
paste(t(expand.grid(pixelSizes, validities)), collapes = "/")
expand.grid(pixelSizes, validities
)
expand.grid(pixelSizes, validities)
apply(expand.grid(pixelSizes, validities), 1, paste, collapse = "-")
apply(expand.grid(pixelSizes, validities), 1, paste, collapse = "/")
h5Paths = file.path(folders$tmp, "data", "h5",
apply(expand.grid(pixelSizes, validities), 1, paste, collapse = "/"))
h5Paths
h5FilePaths = file.path(h5Paths, paste0(identifier, ".h5"))
h5FilePaths
file.exists(h5FilePaths)
pixelSizes
pxielSize = pixelSizes[2]
pixelNlat = 180*1/pixelSize+1
pixelNlon = 360*1/pixelSize+1
pxielSize = pixelSizes[2]
pixelSize = pixelSizes[2]
pixelNlat = 180*1/pixelSize+1
pixelNlon = 360*1/pixelSize+1
pixelNlon
pixelNlat
pixelSize = pixelSizes[1]
pixelNlat = 180*1/pixelSize+1
pixelNlon = 360*1/pixelSize+1
pixelNlat
pixelNlon
validity = validities[1]
savePath = file.path(folders$tmp, "data", "h5", pixelSize, validity)
savePath
saveFilePath = file.path(savePath, paste0(identifier, ".h5"))
file.exists(saveFilePath)
print(paste("Creating raster file for validity", validity, "and pixel size", pixelSize))
command = paste0("/home/archie/harp/bin/harpconvert --format hdf5 --hdf5-compression 9 -a ",
"'tropospheric_NO2_column_number_density_validity>", validity, ";derive(datetime_stop {time}); ",
"bin_spatial(", "1801,-90,0.1,3601,-180,0.1", "); keep(tropospheric_NO2_column_number_density)' ",
rawFilePath,
" ", saveFilePath)
command
"bin_spatial(", pixelNlat, ",-90,", pixelSize, ",",pixelNlon, ",-180,", pixelSize, ", "); keep(tropospheric_NO2_column_number_density)' ",
command = paste0("/home/archie/harp/bin/harpconvert --format hdf5 --hdf5-compression 9 -a ",
"'tropospheric_NO2_column_number_density_validity>", validity, ";derive(datetime_stop {time}); ",
"bin_spatial(", pixelNlat, ",-90,", pixelSize, ",", pixelNlon, ",-180,", pixelSize, "); keep(tropospheric_NO2_column_number_density)' ",
rawFilePath,
" ", saveFilePath)
command
command = paste0("/home/archie/harp/bin/harpconvert --format hdf5 --hdf5-compression 9 -a ",
"'tropospheric_NO2_column_number_density_validity>",
validity, ";derive(datetime_stop {time}); ",
"bin_spatial(",
pixelNlat, ",-90,", pixelSize, ",", pixelNlon, ",-180,", pixelSize,
"); keep(tropospheric_NO2_column_number_density)' ",
rawFilePath,
" ",
saveFilePath)
command
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
# ----------------------------------------------
year = "2020"
month = "03"
no2Data = loadData(file.path(folders$tmp, "data", "merged", paste0(month, "_", year, ".rData")))
mData = no2Data[, .(mValue = median(value),
obs = .N), by = c("X", "Y")]
View(mData)
minObservations = 8
mData = mData[obs > minObservations]
# ----------------------------------------------
# BASE
# ----------------------------------------------
rm(list=ls())
source("./base/init.r", chdir=TRUE)
# ----------------------------------------------
year = "2020"
month = "03"
minObservations = 7
no2Data = loadData(file.path(folders$tmp, "data", "merged", paste0(month, "_", year, ".rData")))
mData = no2Data[, .(mValue = median(value),
obs = .N), by = c("X", "Y")]
mData = mData[obs > minObservations]
saveData(mData, file.path(folders$tmp, "data", "aggregated", paste0(month, "_", year, ".rData")))
mData = mData[obs > minObservations][, obs := NULL]
head(mData)
1.412698e-06
(
saveData(mData, file.path(folders$tmp, "data", "aggregated", paste0(month, "_", year, ".rData")))
saveData(mData, file.path(folders$tmp, "data", "aggregated", paste0(month, "_", year, ".rData")))
